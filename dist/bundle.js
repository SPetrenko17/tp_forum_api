!function(e){var t={};function s(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,a){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(a,r,function(t){return e[t]}.bind(null,r));return a},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=1)}([function(e,t){e.exports=require("pg-promise")},function(e,t,s){e.exports=s(3)},function(e,t){e.exports=require("express")},function(e,t,s){"use strict";s.r(t);const a=s(0)({capSQL:!0}),r={host:"localhost",port:5432,database:"postgres",user:"postgres",password:""};var n=new class{constructor(){this._pgp=a,this._db=a(r)}get db(){return this._db}get pgp(){return this._pgp}};s(0).ParameterizedQuery;class i{constructor(e){this._name=e,this._dbContext=n}async getCount(){try{const e=await this._dbContext.db.one("SELECT count(*) FROM "+this._name);this.count=e?e.count:1}catch(e){console.log("ERROR: ",e.message)}}async clearAll(){try{return await this._dbContext.db.none(`TRUNCATE ${this._name} CASCADE`)}catch(e){console.log("ERROR: ",e.message)}}validateColumn(e){return{name:e,skip:function(){return null===this[e]||void 0===this[e]}}}}const o=s(0).ParameterizedQuery;var u=new class extends i{constructor(){super("users"),this._dbContext=n}async createUser(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new o("INSERT INTO users (nickname, about, fullname, email) VALUES ($1, $2, $3, $4) RETURNING *",[e,t.about,t.fullname,t.email]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message,console.log("ERROR: ",e.message)}return s}async getById(e){try{const t=new o("SELECT * FROM users WHERE user_id = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){console.log("ERROR: ",e.message)}}async getByNickname(e){try{const t=new o("SELECT * FROM users WHERE nickname = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){console.log("ERROR: ",e.message)}}async getByEmail(e){try{const t=new o("SELECT * FROM users WHERE email = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){console.log("ERROR: ",e.message)}}async updateUser(e,t){try{this._columnSet=new this._dbContext.pgp.helpers.ColumnSet([this.validateColumn("nickname"),this.validateColumn("about"),this.validateColumn("fullname"),this.validateColumn("email")],{table:"users"});let s=this._dbContext.pgp.helpers.update(t,this._columnSet,null,{emptyUpdate:!0});return!0===s||(s+=` WHERE "nickname" = '${e}' RETURNING *`,await this._dbContext.db.oneOrNone(s))}catch(e){console.log("ERROR: ",e.message)}}async getUsersByNicknameOrEmail(e,t){try{const s=new o("SELECT * FROM users WHERE nickname = $1 OR email = $2",[e,t]);return await this._dbContext.db.manyOrNone(s)}catch(e){console.log("ERROR: ",e.message)}}async getUsersFromForum(e,t){try{let s="";return t.since&&(s=" AND nickname ",t.desc?s+="<":s+=">",s+=`'${t.since}'`),s+=" ORDER BY nickname ",t.desc&&(s+="DESC"),t.limit&&(s+=" LIMIT "+t.limit.toString()),await this._dbContext.db.manyOrNone(`SELECT forum_id, about, email, fullname, nickname FROM users\n            JOIN forum_users USING(user_id) WHERE forum_id = ${e} ${s}`,[])}catch(e){console.log("ERROR: ",e.message)}}};class d{serialize_one(e){return e}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}}var c=new class extends d{serialize_one(e){return e.data}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}},l=new class{async createUser(e,t){let s=e.params.nickname,a=e.body,r=await u.getUsersByNicknameOrEmail(s,a.email);if(r.length>0)return t.status(409).json(r);let n=await u.createUser(s,a);n.isSuccess?t.status(201).json(c.serialize_one(n)):t.status(500).end()}async get(e,t){let s=e.params.nickname,a=await u.getByNickname(s);if(!a)return t.status(404).json({message:"Can't find user with nickname "+s});t.json(a)}async updateUser(e,t){let s=e.params.nickname,a=e.body,r=await u.getByNickname(s);if(!r)return t.status(404).json({message:"Can't find user with nickname "+s});let n=await u.updateUser(s,a);if(!n)return t.status(409).json({message:"Can't change user with nickname "+s});!0===n?t.json(r):t.json(n)}};const m=s(0).ParameterizedQuery;var g=new class extends i{constructor(){super("forums"),this._dbContext=n}async createForum(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new m("INSERT INTO forums (slug, title, owner_id, owner_nickname) \n                VALUES ($1, $2, $3, $4) RETURNING *",[e.slug,e.title,t.user_id,t.nickname]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message,console.log("ERROR: ",e.message)}return s}async getForumById(e){try{const t=new m("SELECT * FROM forums WHERE forum_id = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){console.log("ERROR: ",e.message)}}async getForumBySlug(e){try{const t=new m("SELECT * FROM forums WHERE slug = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){console.log("ERROR: ",e.message)}}async addPostsToForum(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new m("UPDATE forums SET \n                posts = posts + $1\n                WHERE forum_id = $2\n                RETURNING *",[t,e]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message,console.log("ERROR: ",e.message)}return s}async addThreadsToForum(e,t=1){let s={isSuccess:!1,message:"",data:null};try{const a=new m("UPDATE forums SET threads = threads + $1 WHERE forum_id = $2RETURNING *",[t,e]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message,console.log("ERROR: ",e.message)}return s}};const _=s(0).ParameterizedQuery;var h=new class extends i{constructor(){super("threads"),this._dbContext=n}async createThread(e,t,s){let a={isSuccess:!1,message:"",data:null};try{const r=new _("INSERT INTO threads (\n                slug,\n                author_id, author_nickname,\n                forum_id, forum_slug, \n                created, title, message) \n                VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *");r.values=[e.slug,t.user_id,t.nickname,s.forum_id,s.slug,e.created,e.title,e.message],a.data=await this._dbContext.db.one(r),await this._dbContext.db.oneOrNone("\n            INSERT INTO forum_users (forum_id, user_id)\n                VALUES ($1, $2)\n                ON CONFLICT ON CONSTRAINT unique_user_in_forum DO NOTHING\n                RETURNING *",[s.forum_id,t.user_id]),a.isSuccess=!0}catch(e){a.message=e.message,console.log("ERROR: ",e.message)}return a}async get(e,t){try{const s=new _(`SELECT * FROM threads WHERE ${e} = $1`,[t]);return await this._dbContext.db.oneOrNone(s)}catch(e){console.log("ERROR: ",e.message)}}async updateThread(e,t){try{this.columnSet=new this._dbContext.pgp.helpers.ColumnSet([this.validateColumn("message"),this.validateColumn("title")],{table:"threads"});let s=this._dbContext.pgp.helpers.update(t,this.columnSet,null,{emptyUpdate:!0});return!0===s||(s+=` WHERE id = ${e} RETURNING *`,await this._dbContext.db.oneOrNone(s))}catch(e){console.log("ERROR: ",e.message)}}async getThreadsByForumSlug(e){try{let t="WHERE forum_slug = '"+e.slug+"'";return e.since&&(e.desc?t+=" AND created <= '"+e.since+"'":e.desc||(t+=" AND created >= '"+e.since+"'")),t+=" ORDER BY ",e.desc?t+=" created DESC ":e.desc||(t+=" created ASC "),t+=` LIMIT ${e.limit} `,await this._dbContext.db.manyOrNone("SELECT * FROM threads "+t.toString())}catch(e){console.log("ERROR: ",e.message)}}async updateThreadVotes(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new _("UPDATE threads SET \n                votes = votes + $1\n                WHERE id = $2\n                RETURNING *",[t,e.id]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message}return s}},p=new class extends d{serialize_one(e){return{id:Number(e.id),author:e.author_nickname,slug:e.slug,forum:e.forum_slug,created:e.created,title:e.title,message:e.message,votes:e.votes}}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}},R=new class extends d{serialize_one(e,t){switch(t){case"404":return{slug:e.slug,title:e.title,user:e.owner_nickname,posts:e.posts,threads:e.threads};case"409":return{slug:e.slug,title:e.title,user:e.owner_nickname};case"201":default:return{slug:e.data.slug,title:e.data.title,user:e.data.owner_nickname}}}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}};function E(e){return!!/^\d+$/.test(e)}var y=new class{async createForum(e,t){let s=e.body,a=s.user,r=await u.getByNickname(a);if(!r)return t.status(404).json({message:"Can't find user with nickname "+a});let n=await g.getForumBySlug(s.slug);if(n)return t.status(409).json(R.serialize_one(n,"409"));let i=await g.createForum(s,r);i.isSuccess?t.status(201).json(R.serialize_one(i,"201")):t.status(500).end()}async getForumDetails(e,t){let s=e.params.slug,a=await g.getForumBySlug(s);if(!a)return t.status(404).json({message:"Can't find forum with slug "+s});t.json(R.serialize_one(a,"404"))}async createThreadForForum(e,t){let s=e.body,a=s.author,r=e.params.slug;if(E(r))return console.log("formSlug",r),t.status(400).json({message:"Slug can not contain only digits "});let n=await u.getByNickname(a);if(!n)return t.status(404).json({message:"Can't find user with nickname "+a});let i=await h.get("slug",s.slug);if(i)return t.status(409).json(p.serialize_one(i));let o=await g.getForumBySlug(r);if(!o)return t.status(404).json({message:"Can't find forum with slug "+r});let d=await h.createThread(s,n,o);if(d.isSuccess){return(await g.addThreadsToForum(d.data.forum_id)).isSuccess?t.status(201).json(p.serialize_one(d.data)):t.status(500).end()}return t.status(500).end()}async getForumThreads(e,t){const s={desc:"true"===e.query.desc,limit:e.query.limit?parseInt(e.query.limit):100,since:e.query.since,slug:e.params.slug};if(!await g.getForumBySlug(s.slug))return t.status(404).json({message:"Can't find forum with slug "+s.slug});let a=await h.getThreadsByForumSlug(s);t.json(p.serialize_many(a))}async getForumUsers(e,t){const s={desc:"true"===e.query.desc,limit:e.query.limit?parseInt(e.query.limit):100,since:e.query.since,slug:e.params.slug},a=await g.getForumBySlug(s.slug);if(!a)return t.status(404).json({message:"Can't find forum with slug "+s.slug});const r=await u.getUsersFromForum(a.forum_id,s);t.json(r)}};const f=s(0).ParameterizedQuery;var w=new class extends i{constructor(){super("posts"),this._dbContext=n}async createPost(e,t,s){let a={isSuccess:!1,message:"",data:null};try{if(e.parent){const s=new f("SELECT id FROM posts WHERE id = $1 AND thread_id = $2",[e.parent,t.id]);if(!await this._dbContext.db.oneOrNone(s))return a.message="409",a}const r=new f("INSERT INTO posts (\n                author_id, author_nickname, forum_id, forum_slug, thread_id, thread_slug,\n                created, message, parent)\n                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *",[s.user_id,s.nickname,t.forum_id,t.forum_slug,t.id,t.slug,e.created,e.message,e.parent?e.parent:null]);a.data=await this._dbContext.db.one(r),await this._dbContext.db.oneOrNone("\n            INSERT INTO forum_users (forum_id, user_id)\n                VALUES ($1, $2)\n                ON CONFLICT ON CONSTRAINT unique_user_in_forum DO NOTHING\n                RETURNING *",[t.forum_id,s.user_id]),a.isSuccess=!0}catch(e){a.message=e.message,console.log("ERROR: ",e.message)}return a}async getPostById(e){try{const t=new f("SELECT * FROM posts WHERE id = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){console.log("ERROR: ",e.message)}}async getPostsByThreadIdFlatSort(e,t){try{let s="";return t.since&&(s+=" AND id ",t.desc?s+=" < ":s+=" > ",s+=` ${t.since} `),s+=" ORDER BY id ",t.desc&&(s+=" DESC "),t.limit&&(s+=` LIMIT ${t.limit} `),await this._dbContext.db.manyOrNone(`SELECT * FROM posts WHERE thread_id = ${e} ${s}`,[])}catch(e){console.log("ERROR: ",e.message)}}async getPostsByThreadIdTreeSort(e,t){try{let s="";return t.since?(s+=` WHERE thread_id = ${e} AND path `,t.desc?s+=" < ":s+=" > ",s+=`(SELECT path FROM posts WHERE id = ${t.since}) `):s+=` WHERE thread_id = ${e} `,s+="ORDER BY ",t.desc?s+=" path DESC ":s+=" path ASC ",t.limit&&(s+=" LIMIT "+t.limit),await this._dbContext.db.manyOrNone("SELECT * FROM posts "+s)}catch(e){console.log("ERROR: ",e.message)}}async getPostsByThreadIdParentTreeSort(e,t){try{let s;return s=t.since&&t.desc?this._dbContext.pgp.as.format(" WHERE parent IS NULL \n                AND thread_id = $1  \n                AND path[1] < (SELECT path[1] FROM posts WHERE id =  $2) ",[e,t.since]):t.since&&!t.desc?this._dbContext.pgp.as.format(" WHERE parent IS NULL \n                AND thread_id = $1  \n                AND path[1] > (SELECT path[1] FROM posts WHERE id =  $2) ",[e,t.since]):this._dbContext.pgp.as.format(" WHERE parent IS NULL \n                AND thread_id = $1  ",[e]),await this._dbContext.db.manyOrNone("\n                SELECT * FROM posts JOIN\n                (SELECT id AS sub_parent_id FROM posts $1:raw ORDER BY $5:raw LIMIT $4 ) AS sub \n                ON (thread_id = $2 AND sub.sub_parent_id = path[1]) \n                ORDER BY $3:raw",[s.toString(),e,t.desc?"sub.sub_parent_id DESC, path ASC":"path ASC",t.limit,t.desc?"id DESC ":"id ASC"])}catch(e){console.log("ERROR: ",e.message)}}async updatePost(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new f("UPDATE posts SET message = $1, isEdited = True WHERE id = $2 RETURNING *",[t.message,e]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message,console.log("ERROR: ",e.message||e)}return s}},b=new class extends d{serialize_one(e){let t={id:Number(e.id),author:e.author_nickname,forum:e.forum_slug,thread:Number(e.thread_id),isEdited:e.isedited,created:e.created,message:e.message};return e.parent!==e.id&&(t.parent=Number(e.parent),t.path=e.path),t}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}},N=new class{async getPostDetails(e,t){const s=e.params.id,a=await w.getPostById(s);if(!a)return t.status(404).json({message:`Can't find post with id #${s}\n`});let r={};if(r.post=b.serialize_one(a),e.query.related){const t=e.query.related.split(",");t.includes("user")&&(r.author=await u.getById(a.author_id)),t.includes("thread")&&(r.thread=p.serialize_one(await h.get("id",a.thread_id))),t.includes("forum")&&(r.forum=await g.getForumById(a.forum_id),r.forum.user=r.forum.owner_nickname)}t.json(r)}async updatePostDetails(e,t){const s=e.params.id,a=await w.getPostById(s);if(!a)return t.status(404).json({message:"Can't find post with id "+s});if(!e.body.message||e.body.message===a.message)return t.json(b.serialize_one(a));let r=await w.updatePost(s,e.body);if(!r.isSuccess)return t.status(500).json({message:"Can't change post with id "+s});t.json(b.serialize_one(r.data))}};const S=s(0).ParameterizedQuery;var C=new class extends i{constructor(){super("votes"),this._dbContext=n}async create(e,t,s){let a={isSuccess:!1,errorCode:"",data:null};try{const r=new S("INSERT INTO votes as v \n                (nickname, thread, voice)\n                VALUES ($1, $2, $3) \n                ON CONFLICT ON CONSTRAINT unique_vote DO\n                UPDATE SET voice = $3 WHERE v.voice <> $3\n                RETURNING *, (xmax::text::int > 0) as existed",[t.nickname,s.id,e]);a.data=await this._dbContext.db.oneOrNone(r),a.isSuccess=!0}catch(e){a.errorCode=e.message,console.log("ERROR: ",e.message)}return a}},T=new class{async createPostsForThread(e,t){let s=e.body;const a=E(e.params.slug_or_id)?"id":"slug";let r=E(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,n=await h.get(a,r);if(!n)return t.status(404).json({message:"Can't find forum with slug or id "+e.params.slug_or_id});if(n.id=Number(n.id),Array.isArray(s)&&!s.length)return t.status(201).json(s);if(!Array.isArray(s))return t.status(400).json({message:"Request data must be an array."});let i=[],o=new Date;for(let e of s){let s=await u.getByNickname(e.author);if(!s)return t.status(404).json({message:"Can't find user with nickname "+e.author});e.created=o;let a=await w.createPost(e,n,s);if(!a.isSuccess)return"409"===a.message?t.status(409).json({message:"Can't create post this parent in a different thread."}):t.status(400).end();i.push(a.data)}if(s.length>0){if(!(await g.addPostsToForum(n.forum_id,s.length)).isSuccess)return t.status(500).end()}t.status(201).json(b.serialize_many(i))}async createOrUpdateVoteForThread(e,t){let s=e.body,a=await u.getByNickname(s.nickname);if(!a)return t.status(404).json({message:"Can't find user with nickname "+s.nickname});const r=E(e.params.slug_or_id)?"id":"slug";let n=E(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,i=await h.get(r,n);if(!i)return t.status(404).json({message:"Can't find forum with slug or id "+e.params.slug_or_id});i.id=Number(i.id);let o=await C.create(s.voice,a,i);if(!o.isSuccess)return t.status(400).json({message:o.message});if(!o.data)return t.status(200).json(p.serialize_one(i));let d=o.data.voice;o.data.existed&&(d=1==d?d+1:d-1);let c=await h.updateThreadVotes(i,d);if(o.isSuccess)return t.status(200).json(p.serialize_one(c.data));t.status(500).end()}async getThreadDetails(e,t){const s=E(e.params.slug_or_id)?"id":"slug";let a=E(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,r=await h.get(s,a);if(!r)return t.status(404).json({message:"Can't find forum with slug or id "+e.params.slug_or_id});t.json(p.serialize_one(r))}async updateThreadDetails(e,t){const s=E(e.params.slug_or_id)?"id":"slug";let a=E(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,r=await h.get(s,a);if(!r)return t.status(404).json({message:"Can't find forum with slug or id "+e.params.slug_or_id});let n=await h.updateThread(r.id,e.body);if(!n)return t.status(409).json({message:"Can't change thread with id "+thread_id});!0===n?t.json(p.serialize_one(r)):t.json(p.serialize_one(n))}async getThreadPosts(e,t){const s={desc:"true"===e.query.desc,limit:e.query.limit?parseInt(e.query.limit):100,since:e.query.since},a=E(e.params.slug_or_id)?"id":"slug";let r,n=E(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,i=await h.get(a,n);if(!i)return t.status(404).json({message:"Can't find forum with slug or id "+e.params.slug_or_id});switch(e.query.sort){case"tree":r=await w.getPostsByThreadIdTreeSort(i.id,s);break;case"parent_tree":r=await w.getPostsByThreadIdParentTreeSort(i.id,s);break;default:r=await w.getPostsByThreadIdFlatSort(i.id,s)}t.json(b.serialize_many(r))}},O=new class{async getServiceStatus(e,t){await u.getCount(),await g.getCount(),await h.getCount(),await w.getCount(),t.json({user:Number(u.count),forum:Number(g.count),thread:Number(h.count),post:Number(w.count)})}async clearAll(e,t){await u.clearAll(),await g.clearAll(),await h.clearAll(),await w.clearAll(),await C.clearAll(),t.end()}};let $=s(2),I=$(),x=$.Router(),F=$.Router(),j=$.Router(),k=$.Router(),A=$.Router();x.get("/:nickname/profile",l.get),x.post("/:nickname/profile",l.updateUser),x.post("/:nickname/create",l.createUser),I.use("/api/user",x),F.post("/create",y.createForum),F.get("/:slug/details",y.getForumDetails),F.post("/:slug/create",y.createThreadForForum),F.get("/:slug/threads",y.getForumThreads),F.get("/:slug/users",y.getForumUsers),I.use("/api/forum",F),k.post("/:slug_or_id/create",T.createPostsForThread),k.post("/:slug_or_id/vote",T.createOrUpdateVoteForThread),k.get("/:slug_or_id/details",T.getThreadDetails),k.post("/:slug_or_id/details",T.updateThreadDetails),k.get("/:slug_or_id/posts",T.getThreadPosts),I.use("/api/thread",k),j.get("/:id/details",N.getPostDetails),j.post("/:id/details",N.updatePostDetails),I.use("/api/post",j),A.get("/status",O.getServiceStatus),A.post("/clear",O.clearAll),I.use("/api/service",A),I.use($.json());const U=process.env.PORT||5e3;I.listen(U,()=>console.log("Server on ",U))}]);