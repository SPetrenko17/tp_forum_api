!function(e){var s={};function t(a){if(s[a])return s[a].exports;var n=s[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=s,t.d=function(e,s,a){t.o(e,s)||Object.defineProperty(e,s,{enumerable:!0,get:a})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,s){if(1&s&&(e=t(e)),8&s)return e;if(4&s&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&s&&"string"!=typeof e)for(var n in e)t.d(a,n,function(s){return e[s]}.bind(null,n));return a},t.n=function(e){var s=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(s,"a",s),s},t.o=function(e,s){return Object.prototype.hasOwnProperty.call(e,s)},t.p="",t(t.s=2)}([function(e,s,t){"use strict";t.r(s),t.d(s,"db",(function(){return n})),t.d(s,"notNullError",(function(){return d})),t.d(s,"dataConflict",(function(){return r})),t.d(s,"dataDoesNotExist",(function(){return o})),t.d(s,"notFound",(function(){return u}));const a=t(3),n=t(4)({promiseLib:a})("postgres://postgres:postgres@localhost:5432/postgres"),d="23502",r="23505",o="23503",u="42601"},function(e,s,t){const a=t(0),{db:n}=a;async function d(e,s,t){const a=t,{limit:d}=e.query,{since:r}=e.query;let{sort:o}=e.query;const{desc:u}=e.query;let i;void 0===o&&(o="flat");let c=[];if("flat"===o){i="SELECT id, thread_id AS thread, created,\n    message, parent_id AS parent, author, forum_slug AS forum FROM\n    (SELECT * FROM posts WHERE thread_id = $1 ",c=[a];let e=2;void 0!==r&&(i+="true"===u?" AND id < $"+e++:" AND id > $"+e++,c.push(r)),i+=" ) p ",i+="true"===u?" ORDER BY created DESC, id DESC ":" ORDER BY created, id  ",void 0!==d&&(i+=" LIMIT $"+e++,c.push(d))}else if("tree"===o){let e,s,t,n=2;c=[],c.push(a),void 0!==r?(e=` AND (path ${"true"===u?"<":">"}\n        (SELECT path FROM posts WHERE id = $${n++})) `,c.push(r)):e="",s="true"===u?" DESC ":"",void 0!==d?(t=" LIMIT $"+n++,c.push(d)):t="",i=`\n      SELECT id, author, created, message, parent_id AS parent,\n        forum_slug AS forum, thread_id AS thread\n        FROM posts\n        WHERE thread_id = $1 ${e}\n        ORDER BY path ${s}\n        ${t}\n    `}else{c=[a];const e="true"===u?"DESC":"";let s,t,n=2;void 0!==r?(s=`\n        AND id ${"true"===u?"<":">"} (SELECT path[1] FROM posts WHERE id = $${n++})`,c.push(r)):s="",void 0!==d?(t="LIMIT $"+n++,c.push(d)):t="LIMIT 100000",i=`\n    SELECT author, created, forum_slug AS forum, id, edited,\n      message, parent_id AS parent, thread_id AS thread\n      FROM posts\n      WHERE path[1] IN (\n        SELECT id FROM posts\n        WHERE thread_id=$1 AND parent_id IS NULL\n        ${s}\n        ORDER BY id ${e}\n        ${t}\n      ) AND thread_id=$1\n      ORDER BY path[1] ${e}, path;\n    `}n.any({text:i,values:c}).then(async e=>{if(0===e.length){let e="SELECT threads.id FROM threads WHERE ";isNaN(a),e+="threads.id = $1",await n.one({text:e,values:a}).then(e=>{0===e.length?s.code(404).send({message:"Can't find thread with id #"}):s.code(200).send([])}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find thread with id #"}):s.code(500).send(e)})}s.code(200).send(e)}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find thread with id #"}):s.code(500).send(e)})}e.exports={createThread:async function(e,s){const t=e.body.slug?e.body.slug:null,d=e.body.forum?e.body.forum:e.params.slug;n.one("INSERT INTO threads (author, created, forum, message, title, slug) VALUES\n    ((SELECT nickname FROM users WHERE nickname=$1),\n    $2, (SELECT slug FROM forums WHERE slug=$3),$4, $5, $6)\n    RETURNING author, created, forum, message, title, votes, id "+(e.body.slug?", slug":""),[e.body.author,e.body.created,d,e.body.message,e.body.title,t]).then(async t=>{await n.none("\n        INSERT INTO forum_users(user_id,forum_slug, username) VALUES\n          ((SELECT id FROM users WHERE users.nickname = $2), $1, $2) ON CONFLICT DO NOTHING\n      ",[d,e.body.author]),s.code(201).send(t)}).catch(e=>{e.code===a.dataConflict?n.one({text:"SELECT * FROM threads WHERE slug=$1",values:[t]}).then(e=>{s.code(409).send(e)}).catch(e=>{s.code(500).send(e)}):e.code===a.notNullError?s.code(404).send(e):s.code(500).send(e)})},getThreads:async function(e,s){const t=e.query.desc;let d,r,o;d="true"===t?"DESC":"ASC",r=e.query.limit?"LIMIT "+e.query.limit:"",o=e.query.since?"true"===t?`AND created <= '${e.query.since}'`:`AND created >= '${e.query.since}'`:"",n.any({text:`SELECT * FROM threads WHERE forum=$1 ${o} ORDER BY created ${d} ${r};`,values:[e.params.slug]}).then(t=>{0===t.length?n.one({text:"SELECT * FROM forums WHERE slug=$1",values:[e.params.slug]}).then(()=>{s.code(200).send(t)}).catch(t=>{0===t.code?s.code(404).send({message:"Can't find threads by forum "+e.params.slug}):s.code(500).send(t)}):s.code(200).send(t)}).catch(t=>{t.code===a.notFound?s.code(404).send({message:"Can't find threads by forum "+e.params.slug}):s.code(500).send(t)})},getThreadInfo:async function(e,s){let t="\n    SELECT author, created, forum, id, message, votes, slug, title FROM threads\n      WHERE\n  ";isNaN(e.params.slug)?t+=" slug = $1":t+=" id = $1",n.one({text:t,values:[e.params.slug]}).then(t=>{0===t.length&&s.code(404).send({message:"Can't find forum by slug "+e.params.slug}),s.code(200).send(t)}).catch(t=>{0===t.code&&s.code(404).send({message:"Can't find forum by slug "+e.params.slug})})},getPosts:async function(e,s){isNaN(e.params.slug)?n.one({text:"SELECT id FROM threads WHERE slug=$1",values:[e.params.slug]}).then(t=>{d(e,s,t.id)}).catch(()=>{s.code(404).send({message:"Can't find thread with id #"})}):d(e,s,e.params.slug)},updateThread:async function(e,s){let t,a=[],d=1;const r=e.body.title,o=e.body.message;void 0===r&&void 0===o?(t="\n      SELECT created, id, title,\n        slug, message, author, forum\n        FROM threads WHERE\n    ",isNaN(e.params.slug)?t+="slug = $1 LIMIT 1":t+="id = $1 LIMIT 1",a=[e.params.slug]):(t="UPDATE threads SET ",void 0!==r&&(t+=`title = $${d++},`,a.push(r)),void 0!==o&&(t+=`message = $${d++},`,a.push(o)),t=t.slice(0,-1),t+=" WHERE ",isNaN(e.params.slug)?t+=`\n        slug = $${d++}\n        RETURNING created, id, title,\n          slug, message,\n          author, forum\n      `:t+=`\n        id = $${d++}\n        RETURNING created, id, title,\n          slug, message,\n          author, forum\n      `,a.push(e.params.slug)),n.one({text:t,values:a}).then(t=>{0===t.length?s.code(404).send({message:"Can't find thread by slug: "+e.params.slug}):s.code(200).send(t)}).catch(t=>{0===t.code?s.code(404).send({message:"Can't find thread by slug: "+e.params.slug}):s.code(500).send(t)})}}},function(e,s,t){e.exports=t(6)},function(e,s){e.exports=require("bluebird")},function(e,s){e.exports=require("pg-promise")},function(e,s){e.exports=require("fastify")},function(e,s,t){"use strict";t.r(s);var a=new class{serializeRelated(e){return{nickname:e.user_nickname,about:e.user_about,fullname:e.user_fullname,email:e.user_email}}serializeRequest(e){return{nickname:e.params.nickname,fullname:e.body.fullname,email:e.body.email,about:e.body.about}}};const n=t(0),{db:d}=n;var r=new class{async createUser(e,s){const t=a.serializeRequest(e);d.one({text:"INSERT INTO users (nickname, fullname, email, about) VALUES ($1, $2, $3, $4) RETURNING *",values:[t.nickname,t.fullname,t.email,t.about]}).then(e=>{s.code(201).send(e)}).catch(e=>{e.code===n.dataConflict&&d.any({text:"SELECT * FROM users WHERE nickname=$1 OR email=$2",values:[t.nickname,t.email]}).then(e=>{s.code(409).send(e)}).catch(e=>{s.code(500).send(e)})})}async getUserInfo(e,s){d.one({text:"SELECT about, email, nickname, fullname FROM users WHERE nickname=$1;",values:[e.params.nickname]}).then(t=>{0===t.length&&s.code(404).send({message:"Can't find user by nickname "+e.params.nickname}),s.code(200).send(t)}).catch(e=>{0===e.code&&s.code(404).send({message:"Can't find user with id #"})})}async updateUserInfo(e,s){let t="UPDATE users SET ";e.body.fullname&&(t+=`fullname = '${e.body.fullname}', `),e.body.email?t+=`email = '${e.body.email}', `:t+="email = email, ",e.body.about?t+=`about = '${e.body.about}' `:t+="about = about ",t+=`\n    WHERE nickname = '${e.params.nickname}'\n    RETURNING *`,d.one(t).then(t=>{0===t.length&&s.code(404).send({message:"Can't find user by nickname "+e.params.nickname}),s.code(200).send(t)}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find user with id #"}):e.code===n.dataConflict&&s.code(409).send({message:"Can't find user with id #"})})}};const o=t(0),{db:u}=o;var i=new class{async createForum(e,s){u.one('INSERT INTO forums (slug, title, "user") VALUES\n    ($1, $2, (SELECT nickname FROM users WHERE nickname=$3)) RETURNING *',[e.body.slug,e.body.title,e.body.user]).then(e=>{s.code(201).send(e)}).catch(t=>{t.code===o.dataConflict?u.one({text:'SELECT slug, title, "user" FROM forums WHERE slug=$1',values:[e.body.slug]}).then(e=>{s.code(409).send(e)}):t.code===o.notNullError&&s.code(404).send(t)})}async getForumInfo(e,s){u.one("SELECT * FROM forums WHERE slug=$1;",[e.params.slug]).then(t=>{0===t.length&&s.code(404).send({message:"Can't find forum by slug "+e.params.slug}),s.code(200).send(t)}).catch(t=>{0===t.code&&s.code(404).send({message:"Can't find forum by slug "+e.params.slug})})}async getForumUsers(e,s){const t=e.query.desc,a=e.query.limit,n=e.query.since,d=e.params.slug;let r='\n    SELECT u.* FROM "users" u\n    JOIN forum_users f ON u.id = f.user_id\n    WHERE\n      f.forum_slug = $1\n    ';const o=[d];let i=2;n&&(r+="true"===t?` AND f.username < $${i++} COLLATE "C" `:` AND f.username > $${i++} COLLATE "C" `,o.push(n)),r+="true"===t?' ORDER BY f.username COLLATE "C" DESC ':' ORDER BY f.username COLLATE "C" ASC ',a&&(r+=" LIMIT $"+i++,o.push(a)),u.any(r,o).then(e=>{0===e.length?u.one({text:"SELECT id FROM forums WHERE slug = $1 LIMIT 1",values:[d]}).then(e=>{0!==e.length?s.code(200).send([]):s.code(500).send({message:"Everything is empty",forumInfo:e})}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find forum by slug "+d}):s.code(500).send(e)}):s.header("Content-Type","application/json").type("application/json").code(200).send(e)}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find forum by slug "+d}):s.code(500).send(e)})}},c=t(1),l=t.n(c),m=new class{serializeRelated(e){return{forum:e.thread_forum_slug,author:e.thread_author,created:e.thread_created,votes:e.thread_votes,id:e.thread_id,title:e.thread_title,message:e.thread_message,slug:e.thread_slug}}},h=new class{serializeRelated(e){return{author:e.post_author,id:e.pid,thread:e.post_thread,parent:e.post_parent,forum:e.post_forum_slug,message:e.post_message,isEdited:e.pisEdited,created:e.post_created}}},E=new class{serializeRelated(e){return{threads:e.forum_threads,posts:e.forum_posts,title:e.forum_title,user:e.forum_user_nickname,slug:e.forum_slug}}};const p=t(0),{db:g}=p;var f=new class{async createPost(e,s){let t="SELECT id AS thread_id, forum FROM threads WHERE ";isNaN(e.params.slug)?t+=" slug = $1":t+=" id = $1";const a=e.body;p.postsCount+=a.length,g.one(t,[e.params.slug]).then(n=>{0===a.length&&s.code(201).send([]),0===n.length&&s.code(404).send({message:"Can't find thread by slug "+e.params.slug}),t="INSERT INTO posts (edited, author, message,thread_id, parent_id, forum_slug) VALUES ";const d=[];let r=1;const o=[];for(let e=0;e<a.length;e++)o.push(a[e].author),a[e].parent?(t+=`(FALSE, $${r}, $${r+1}, (\n              SELECT (CASE WHEN EXISTS ( SELECT 1 FROM posts p WHERE p.id=$${r+3} AND p.thread_id=$${r+2})\n                THEN $${r+2} ELSE NULL END)), $${r+3},\n                $${r+4}),`,r+=5,d.push(a[e].author,a[e].message,n.thread_id,a[e].parent,n.forum)):(t+=`(FALSE, $${r}, $${r+1}, $${r+2}, NULL, $${r+3}),`,r+=4,d.push(a[e].author,a[e].message,n.thread_id,n.forum));t=t.slice(0,-1),t+=" RETURNING author, id, created,\n        thread_id AS thread, parent_id AS parent, forum_slug AS forum, message",g.any(t,d).then(async e=>{await g.none("UPDATE forums SET posts=forums.posts+$1 WHERE slug=$2",[a.length,n.forum]);let t="INSERT INTO forum_users(user_id, forum_slug, username) VALUES",d=1;const r=[];for(let e=0;e<o.length;e++)t+=`((SELECT id FROM users WHERE users.nickname = $${d+1}),\n              $${d}, $${d+1}),`,d+=2,r.push(n.forum,o[e]);t=t.slice(0,-1),t+=" ON CONFLICT DO NOTHING",await g.none(t,r).catch(e=>console.log(e)),s.code(201).send(e)}).catch(e=>{console.log(e),e.code===p.notNullError?s.code(409).send({message:"Parent post was created in another thread"}):e.code===p.dataDoesNotExist?s.code(404).send({message:"User not found"}):e.code===p.notNullError?s.code(404).send({message:"Can't find user with id #"}):s.code(500).send(e)})}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find user with id #"}):s.code(500).send(e)})}async getPostInfo(e,s){const t=e.params.slug,n=e.query.related;let d,r,o,u;if(n&&(d=n.includes("user"),r=n.includes("thread"),o=n.includes("forum")),n){let e="\n      SELECT posts.id AS pid, posts.parent_id AS post_parent,\n        posts.thread_id AS post_thread, posts.message AS post_message,\n        posts.edited AS post_is_edited, posts.created AS post_created,\n        posts.forum_slug AS post_forum_slug, posts.author AS post_author,",n=" FROM posts ";d&&(e+="\n        U.nickname AS user_nickname, U.about AS user_about,\n        U.fullname AS user_fullname, U.email AS user_email,",n+="LEFT JOIN users U ON U.nickname = posts.author "),r&&(e+="\n        threads.author AS thread_author, threads.created AS thread_created,\n        threads.votes AS thread_votes, threads.id AS thread_id,\n        threads.title AS thread_title, threads.message AS thread_message,\n        threads.slug AS thread_slug, threads.forum AS thread_forum_slug,",n+="LEFT JOIN threads ON threads.id = posts.thread_id "),o&&(e+='\n        F.slug AS forum_slug, F.threads AS forum_threads, F.title as forum_title,\n        F.posts AS forum_posts, F."user" AS forum_user_nickname,',n+="LEFT JOIN forums F ON F.slug = posts.forum_slug "),n+=" WHERE posts.id = $1 LIMIT 1";const u=e.slice(0,-1)+n;g.one(u,t).then(e=>{const t={};t.post=h.serializeRelated(e),o&&(t.forum=E.serializeRelated(e)),d&&(t.author=a.serializeRelated(e)),r&&(t.thread=m.serializeRelated(e)),s.code(200).send(t)}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find thread with id "+t}):s.code(500).send(e)})}else u='SELECT id, parent_id AS parent, thread_id AS thread, message, edited AS "isEdited", created, forum_slug AS forum, author FROM posts WHERE id = $1 LIMIT 1',g.one('SELECT id, parent_id AS parent, thread_id AS thread, message, edited AS "isEdited", created, forum_slug AS forum, author FROM posts WHERE id = $1 LIMIT 1',[t]).then(e=>{s.code(200).send({post:e})}).catch(e=>{0===e.code?s.code(404).send({message:"Can't find post with id "+t}):s.code(500).send(e)})}async updatePost(e,s){let t;const a=[];e.body.message?(t='\n    UPDATE posts SET edited = message <> $1, message = $1 WHERE id = $2 RETURNING id, message, author, created, forum_slug AS forum,\n        parent_id AS parent, thread_id AS thread, edited AS "isEdited"\n\n    ',a.push(e.body.message,e.params.id)):(t="\n      SELECT id, author, message, created,forum_slug AS forum, thread_id AS thread FROM posts WHERE id=$1",a.push(e.params.id)),g.one(t,a).then(t=>{0===t.length&&s.code(404).send({message:"Can't find post by id "+e.params.id}),s.code(200).send(t)}).catch(t=>{0===t.code?s.code(404).send({message:"Can't find post by id "+e.params.id}):t.code===p.dataConflict&&s.code(409).send({message:"Can't find user with id #"})})}};const S=t(0).db;var R=new class{async createVote(e,s){let t,a=" SELECT id, created, slug, title, forum,\n    author, message, votes FROM threads WHERE ";isNaN(e.params.slug)?a+=`slug = '${e.params.slug}' LIMIT 1`:a+=`id = '${e.params.slug}' LIMIT 1`,t=isNaN(e.params.slug)?{text:"INSERT INTO votes (thread_id, user_id, voice)\n      VALUES (\n        (SELECT id FROM threads WHERE slug=$1), $2, $3\n      )\n      ON CONFLICT ON CONSTRAINT votes_user_thread_unique\n        DO UPDATE SET voice = $3\n        WHERE votes.thread_id = (SELECT id FROM threads WHERE slug = $1)\n          AND votes.user_id = $2\n      ",values:[e.params.slug,e.body.nickname,e.body.voice]}:{text:"INSERT INTO votes (thread_id, user_id, voice)\n              VALUES ($1, $2, $3)\n              ON CONFLICT ON CONSTRAINT votes_user_thread_unique\n              DO UPDATE SET voice = $3\n              WHERE votes.thread_id = $1 AND votes.user_id = $2\n      ",values:[e.params.slug,e.body.nickname,e.body.voice]},S.none(t).then(()=>{S.one(a).then(e=>{s.code(200).send(e)}).catch(e=>{s.code(500).send(e)})}).catch(e=>{s.code(404).send({message:"Can't find user with id #\n"})})}};const $=t(0),{db:T}=$;var _=new class{async status(e,s){T.one("\n    SELECT (\n      SELECT COUNT(*) FROM forums) AS forum,\n      (SELECT COUNT(*) FROM users) AS user_count,\n      (SELECT COUNT(*) FROM threads) AS thread,\n      (SELECT COUNT(*) FROM posts) AS post\n    ").then(e=>{e.forum=parseInt(e.forum,10),e.user=parseInt(e.user_count,10),e.thread=parseInt(e.thread,10),e.post=parseInt(e.post,10),s.code(200).send(e)}).catch(e=>{s.code(500).send(e)})}async clear(e,s){T.none("\n    TRUNCATE TABLE forum_users, votes, posts, threads, forums, users;").then(()=>{s.code(200).send(null)}).catch(e=>{s.code(500).send(e)})}};const C=t(5)({});C.addContentTypeParser("application/json",{parseAs:"buffer"},(e,s,t)=>{s.length>0?t(null,JSON.parse(s)):t(null,{})}),C.listen(5e3,"0.0.0.0",()=>{console.log("Started on 5000")}),C.post("/api/user/:nickname/create",r.createUser),C.get("/api/user/:nickname/profile",r.getUserInfo),C.post("/api/user/:nickname/profile",r.updateUserInfo),C.post("/api/forum/create",i.createForum),C.get("/api/forum/:slug/details",i.getForumInfo),C.post("/api/forum/:slug/create",l.a.createThread),C.get("/api/forum/:slug/threads",l.a.getThreads),C.post("/api/thread/:slug/create",f.createPost),C.post("/api/thread/:slug/vote",R.createVote),C.get("/api/thread/:slug/details",l.a.getThreadInfo),C.get("/api/thread/:slug/posts",l.a.getPosts),C.post("/api/thread/:slug/details",l.a.updateThread),C.get("/api/forum/:slug/users",i.getForumUsers),C.get("/api/post/:slug/details",f.getPostInfo),C.get("/api/service/status",_.status),C.post("/api/service/clear",_.clear),C.post("/api/post/:id/details",f.updatePost)}]);