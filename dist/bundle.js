!function(e){var t={};function s(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,a){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(a,n,function(t){return e[t]}.bind(null,n));return a},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=1)}([function(e,t){e.exports=require("pg-promise")},function(e,t,s){e.exports=s(3)},function(e,t){e.exports=require("fastify")},function(e,t,s){"use strict";s.r(t);const a=s(0)({capSQL:!0}),n={host:"localhost",port:5432,database:"docker",user:"docker",password:"docker"};var r=new class{constructor(){this._pgp=a,this._db=a(n)}get db(){return this._db}get pgp(){return this._pgp}};class i{constructor(e){this._name=e,this._dbContext=r}async getCount(){try{const e=await this._dbContext.db.one("SELECT count(*) FROM "+this._name);this.count=e?e.count:1}catch(e){}}async clearAll(){try{return await this._dbContext.db.none(`TRUNCATE ${this._name} CASCADE`)}catch(e){}}validateColumn(e){return{name:e,skip:function(){return!this[e]}}}}const o=s(0).ParameterizedQuery;var d=new class extends i{constructor(){super("users"),this._dbContext=r}async createUser(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new o("INSERT INTO users (nickname, about, fullname, email) VALUES ($1, $2, $3, $4) RETURNING *",[e,t.about,t.fullname,t.email]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message}return s}async getById(e){try{const t=new o("SELECT * FROM users WHERE user_id = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){}}async getByNickname(e){try{const t=new o("SELECT * FROM users WHERE nickname = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){}}async updateUser(e,t){try{this._columnSet=new this._dbContext.pgp.helpers.ColumnSet([this.validateColumn("nickname"),this.validateColumn("about"),this.validateColumn("fullname"),this.validateColumn("email")],{table:"users"});let s=this._dbContext.pgp.helpers.update(t,this._columnSet,null,{emptyUpdate:!0});return!0===s||(s+=` WHERE "nickname" = '${e}' RETURNING *`,await this._dbContext.db.oneOrNone(s))}catch(e){}}async getUsersByNicknameOrEmail(e,t){try{const s=new o("SELECT * FROM users WHERE nickname = $1 OR email = $2",[e,t]);return await this._dbContext.db.manyOrNone(s)}catch(e){}}async getUsersFromForum(e,t){try{let s="";return t.since&&(s=" AND nickname ",t.desc?s+="<":s+=">",s+=`'${t.since}'`),s+=" ORDER BY nickname ",t.desc&&(s+="DESC"),t.limit&&(s+=" LIMIT "+t.limit.toString()),await this._dbContext.db.manyOrNone(`SELECT forum_id, about, email, fullname, nickname FROM users\n            INNER JOIN forum_users USING(user_id) WHERE forum_id = ${e} ${s}`,[])}catch(e){}}};class u{serialize_one(e){return e}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}}var c=new class extends u{serialize_one(e){return e.data}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}},l=new class{async createUser(e,t){let s=e.params.nickname,a=e.body,n=await d.getUsersByNicknameOrEmail(s,a.email);if(n.length)return t.code(409).header("Content-Type","application/json; charset=utf-8").send(n);let r=await d.createUser(s,a);r.isSuccess?t.code(201).header("Content-Type","application/json; charset=utf-8").send(c.serialize_one(r)):t.code(500).header("Content-Type","application/json; charset=utf-8").send()}async get(e,t){const s=e.params.nickname;let a=await d.getByNickname(s);if(!a)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find user with nickname "+s});t.header("Content-Type","application/json; charset=utf-8").send(a)}async updateUser(e,t){const s=e.params.nickname;let a=await d.getByNickname(s);if(!a)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find user with nickname "+s});let n=await d.updateUser(s,e.body);if(!n)return t.code(409).header("Content-Type","application/json; charset=utf-8").send({message:"Can't change user with nickname "+s});!0===n?t.header("Content-Type","application/json; charset=utf-8").send(a):t.header("Content-Type","application/json; charset=utf-8").send(n)}};const p=s(0).ParameterizedQuery;var h=new class extends i{constructor(){super("forums"),this._dbContext=r}async createForum(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new p("INSERT INTO forums (slug, title, owner_id, owner_nickname) \n                VALUES ($1, $2, $3, $4) RETURNING *",[e.slug,e.title,t.user_id,t.nickname]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message}return s}async getForumById(e){try{const t=new p("SELECT * FROM forums WHERE forum_id = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){}}async getForumBySlug(e){try{const t=new p("SELECT * FROM forums WHERE slug = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){}}async addPostsToForum(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new p("UPDATE forums SET \n                posts = posts + $1\n                WHERE forum_id = $2\n                RETURNING *",[t,e]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message}return s}async addThreadsToForum(e,t){let s={isSuccess:!1,message:"",data:null};t||(t=1);try{const a=new p("UPDATE forums SET threads = threads + $1 WHERE forum_id = $2 RETURNING *",[t,e]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message}return s}};const m=s(0).ParameterizedQuery;var g=new class extends i{constructor(){super("threads"),this._dbContext=r}async createThread(e,t,s){let a={isSuccess:!1,message:"",data:null};try{const n=new m("INSERT INTO threads (\n                slug,\n                author_id, author_nickname,\n                forum_id, forum_slug, \n                created, title, message) \n                VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *",[e.slug,t.user_id,t.nickname,s.forum_id,s.slug,e.created,e.title,e.message]);a.data=await this._dbContext.db.one(n),await this._dbContext.db.oneOrNone("\n            INSERT INTO forum_users (forum_id, user_id)\n                VALUES ($1, $2)\n                ON CONFLICT DO NOTHING\n                RETURNING *",[s.forum_id,t.user_id]),a.isSuccess=!0}catch(e){a.message=e.message}return a}async get(e,t){try{const s=new m(`SELECT * FROM threads WHERE ${e} = $1`,[t]);return await this._dbContext.db.oneOrNone(s)}catch(e){}}async updateThread(e,t){try{this.columnSet=new this._dbContext.pgp.helpers.ColumnSet([this.validateColumn("message"),this.validateColumn("title")],{table:"threads"});let s=this._dbContext.pgp.helpers.update(t,this.columnSet,null,{emptyUpdate:!0});return!0===s||(s+=` WHERE id = ${e} RETURNING *`,await this._dbContext.db.oneOrNone(s))}catch(e){}}async getThreadsByForumSlug(e){try{let t="WHERE forum_slug = '"+e.slug+"'";return e.since&&(e.desc?t+=" AND created <= '"+e.since+"'":e.desc||(t+=" AND created >= '"+e.since+"'")),t+=" ORDER BY ",e.desc?t+=" created DESC ":e.desc||(t+=" created ASC "),t+=` LIMIT ${e.limit} `,await this._dbContext.db.manyOrNone("SELECT * FROM threads "+t.toString())}catch(e){}}async updateThreadVotes(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new m("UPDATE threads SET \n                votes = votes + $1\n                WHERE id = $2\n                RETURNING *",[t,e.id]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message}return s}},y=new class extends u{serialize_one(e){return{id:Number(e.id),author:e.author_nickname,slug:e.slug,forum:e.forum_slug,created:e.created,title:e.title,message:e.message,votes:e.votes}}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}},_=new class extends u{serialize_one(e,t){switch(t){case"404":return{slug:e.slug,title:e.title,user:e.owner_nickname,posts:e.posts,threads:e.threads};case"409":return{slug:e.slug,title:e.title,user:e.owner_nickname};case"201":default:return{slug:e.data.slug,title:e.data.title,user:e.data.owner_nickname}}}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}};function f(e){return!!/^\d+$/.test(e)}var T=new class{async createForum(e,t){let s=e.body,a=s.user,n=await d.getByNickname(a);if(!n)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find user with nickname "+a});let r=await h.getForumBySlug(s.slug);if(r)return t.code(409).header("Content-Type","application/json; charset=utf-8").send(_.serialize_one(r,"409"));let i=await h.createForum(s,n);i.isSuccess?t.code(201).header("Content-Type","application/json; charset=utf-8").send(_.serialize_one(i,"201")):t.code(500).header("Content-Type","application/json; charset=utf-8").send()}async GetRequestGetForumDetails(e,t){let s=e.params.slug,a=await h.getForumBySlug(s);if(!a)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug "+s});t.header("Content-Type","application/json; charset=utf-8").send(_.serialize_one(a,"404"))}async PostRequestCreateThreadsForForum(e,t){let s=e.body,a=s.author,n=e.params.slug;if(f(n))return t.code(400).header("Content-Type","application/json; charset=utf-8").send({message:"Slug can not contain only digits "});let r=await d.getByNickname(a);if(!r)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find user with nickname "+a});let i=await g.get("slug",s.slug);if(i)return t.code(409).header("Content-Type","application/json; charset=utf-8").send(y.serialize_one(i));let o=await h.getForumBySlug(n);if(!o)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug "+n});let u=await g.createThread(s,r,o);if(u.isSuccess){return(await h.addThreadsToForum(u.data.forum_id)).isSuccess?t.code(201).header("Content-Type","application/json; charset=utf-8").send(y.serialize_one(u.data)):t.code(500).header("Content-Type","application/json; charset=utf-8").send()}return t.code(500).header("Content-Type","application/json; charset=utf-8").send()}async GetRequestGetForumThreads(e,t){const s={desc:"true"===e.query.desc,limit:e.query.limit?Number(e.query.limit):100,since:e.query.since,slug:e.params.slug};if(!await h.getForumBySlug(s.slug))return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug "+s.slug});let a=await g.getThreadsByForumSlug(s);t.header("Content-Type","application/json; charset=utf-8").send(y.serialize_many(a))}async GetRequestGetForumUsers(e,t){const s={desc:"true"===e.query.desc,limit:e.query.limit?Number(e.query.limit):100,since:e.query.since,slug:e.params.slug},a=await h.getForumBySlug(s.slug);if(!a)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug "+s.slug});const n=await d.getUsersFromForum(a.forum_id,s);t.header("Content-Type","application/json; charset=utf-8").send(n)}};const C=s(0).ParameterizedQuery;var w=new class extends i{constructor(){super("posts"),this._dbContext=r}async createPosts(e,t,s){let a={isSuccess:!1,message:"",data:null},n=new Date(Date.now()).toISOString().replace("T"," ").replace("Z","");try{let r="",i="";for(let a=0;a<e.length;a++)e[a].created=n,r+=`('${s[a].user_id}' , '${s[a].nickname}' , '${t.forum_id}' , '${t.forum_slug}' , '${t.id}' , '${t.slug}' , '${e[a].created}' , '${e[a].message}' , ${e[a].parent?e[a].parent.toString():"null"} ) ${e[a+1]?",":""}`,i+=`(${t.forum_id}, ${s[a].user_id} ) ${e[a+1]?",":""}`;const o=new C(`INSERT INTO posts (\n                author_id, author_nickname, forum_id, forum_slug, thread_id, thread_slug,\n                created, message, parent)\n                VALUES ${r} RETURNING *`,[]);this.query=o,a.data=await this._dbContext.db.manyOrNone(o),await this._dbContext.db.manyOrNone(`\n            INSERT INTO forum_users (forum_id, user_id)\n                VALUES ${i}\n                ON CONFLICT DO NOTHING\n                RETURNING *`,[]),a.isSuccess=!0}catch(e){if(console.log("error catch",e),console.log("error query",e.code,this.query),"00409"===e.code)return a.message="409",a;if("23503"===e.code)return a.message="409",a;e.message=""+e,a.message=e.message}return a}async createPost(e,t,s){let a={isSuccess:!1,message:"",data:null};try{const n=new C("INSERT INTO posts (\n                author_id, author_nickname, forum_id, forum_slug, thread_id, thread_slug,\n                created, message, parent)\n                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *",[s.user_id,s.nickname,t.forum_id,t.forum_slug,t.id,t.slug,e.created,e.message,e.parent?e.parent:null]);a.data=await this._dbContext.db.one(n),await this._dbContext.db.oneOrNone("\n            INSERT INTO forum_users (forum_id, user_id)\n                VALUES ($1, $2)\n                ON CONFLICT DO NOTHING\n                RETURNING *",[t.forum_id,s.user_id]),a.isSuccess=!0}catch(e){if("00409"===e.code)return a.message="409",a;if("23503"===e.code)return a.message="409",a;a.message=e.message}return a}async getPostById(e){try{const t=new C("SELECT * FROM posts WHERE id = $1",[e]);return await this._dbContext.db.oneOrNone(t)}catch(e){}}async getPostByThreadId(e,t,s){switch(e){case"tree":return await this.getPostsByThreadIdTreeSort(t,s);case"parent_tree":return await this.getPostsByThreadIdParentTreeSort(t,s);default:return await this.getPostsByThreadIdFlatSort(t,s)}}async getPostsByThreadIdFlatSort(e,t){try{let s="";return t.since&&(s+=" AND id ",t.desc?s+=" < ":s+=" > ",s+=` ${t.since} `),s+=" ORDER BY id ",t.desc&&(s+=" DESC "),t.limit&&(s+=` LIMIT ${t.limit} `),await this._dbContext.db.manyOrNone(`SELECT * FROM posts WHERE thread_id = ${e} ${s}`,[])}catch(e){}}async getPostsByThreadIdTreeSort(e,t){try{let s="";return t.since?(s+=` WHERE thread_id = ${e} AND path `,t.desc?s+=" < ":s+=" > ",s+=`(SELECT path FROM posts WHERE id = ${t.since}) `):s+=` WHERE thread_id = ${e} `,s+="ORDER BY ",t.desc?s+=" path DESC ":s+=" path ASC ",t.limit&&(s+=" LIMIT "+t.limit),await this._dbContext.db.manyOrNone("SELECT * FROM posts "+s)}catch(e){}}async getPostsByThreadIdParentTreeSort(e,t){try{let s="WHERE parent IS NULL AND thread_id = "+e;return t.since&&t.desc?s+=`AND path[1] < (SELECT path[1] FROM posts WHERE id =  ${t.since})`:t.since&&!t.desc&&(s+=`AND path[1] > (SELECT path[1] FROM posts WHERE id =  ${t.since})`),await this._dbContext.db.manyOrNone(`\n                SELECT * FROM posts INNER JOIN\n                (SELECT id AS sub_parent_id FROM posts ${s} ORDER BY $1:raw LIMIT $2 ) AS sub \n                ON (thread_id = $3 AND sub.sub_parent_id = path[1]) \n                ORDER BY $4:raw`,[t.desc?"id DESC ":"id ASC",t.limit,e,t.desc?"sub.sub_parent_id DESC, path ASC":"path ASC"])}catch(e){}}async updatePost(e,t){let s={isSuccess:!1,message:"",data:null};try{const a=new C("UPDATE posts SET message = $1, isEdited = True WHERE id = $2 RETURNING *",[t.message,e]);s.data=await this._dbContext.db.one(a),s.isSuccess=!0}catch(e){s.message=e.message}return s}},E=new class extends u{serialize_one(e){let t={id:Number(e.id),author:e.author_nickname,forum:e.forum_slug,thread:Number(e.thread_id),isEdited:e.isedited,created:e.created,message:e.message};return e.parent!==e.id&&(t.parent=Number(e.parent),t.path=e.path),t}serialize_many(e){return e.length?e.map(e=>this.serialize_one(e)):[]}},N=new class{async GetRequestPostDetails(e,t){const s=e.params.id,a=await w.getPostById(s);if(!a)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:`Can't find post with id #${s}\n`});let n={};if(n.post=E.serialize_one(a),e.query.related){const t=e.query.related.split(",");t.includes("user")&&(n.author=await d.getById(a.author_id)),t.includes("thread")&&(n.thread=y.serialize_one(await g.get("id",a.thread_id))),t.includes("forum")&&(n.forum=await h.getForumById(a.forum_id),n.forum.user=n.forum.owner_nickname)}t.header("Content-Type","application/json; charset=utf-8").send(n)}async PostRequestPostDetails(e,t){const s=e.params.id,a=await w.getPostById(s);if(!a)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find post with id "+s});if(!e.body.message)return t.header("Content-Type","application/json; charset=utf-8").send(E.serialize_one(a));if(e.body.message===a.message)return t.header("Content-Type","application/json; charset=utf-8").send(E.serialize_one(a));let n=await w.updatePost(s,e.body);return n.isSuccess?t.header("Content-Type","application/json; charset=utf-8").send(E.serialize_one(n.data)):t.code(500).header("Content-Type","application/json; charset=utf-8").send({message:"Can't change post with id "+s})}};const b=s(0).ParameterizedQuery;var S=new class extends i{constructor(){super("votes"),this._dbContext=r}async create(e,t,s){let a={isSuccess:!1,errorCode:"",data:null};try{const n=new b("INSERT INTO votes as vote \n                (nickname, thread, voice)\n                VALUES ($1, $2, $3) \n                ON CONFLICT ON CONSTRAINT unique_vote DO\n                UPDATE SET voice = $3 WHERE vote.voice <> $3\n                RETURNING *, (xmax::text <> '0') as existed",[t.nickname,s.id,e]);a.data=await this._dbContext.db.oneOrNone(n),a.isSuccess=!0}catch(e){a.errorCode=e.message}return a}},R=new class{async PostRequestPostForThread(e,t){let s=e.body;const a=f(e.params.slug_or_id)?"id":"slug";let n=f(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,r=await g.get(a,n);if(!r)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug or id "+e.params.slug_or_id});if(r.id=Number(r.id),Array.isArray(s)&&!s.length)return t.code(201).header("Content-Type","application/json; charset=utf-8").send(s);if(!Array.isArray(s))return t.code(400).header("Content-Type","application/json; charset=utf-8").send({message:"Request data must be an array."});let i=[],o=(new Date,[]);for(let e of s)if(o.push(await d.getByNickname(e.author)),!o)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find user with nickname "+e.author});let u=await w.createPosts(s,r,o);if(console.log("createPostsResult",u),!u.isSuccess)return"409"===u.message?t.code(409).header("Content-Type","application/json; charset=utf-8").send({message:"Can't create post this parent in a different thread."}):"TypeError: Cannot read property 'user_id' of null"===u.message?t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find post author by nickname"}):"error: INSERT has more target columns than expressions"===u.message?t.code(405).header("Content-Type","application/json; charset=utf-8").send():t.code(400).header("Content-Type","application/json; charset=utf-8").send();if(i=u.data,s.length>0){if(!(await h.addPostsToForum(r.forum_id,s.length)).isSuccess)return t.code(500).header("Content-Type","application/json; charset=utf-8").send()}t.code(201).header("Content-Type","application/json; charset=utf-8").send(E.serialize_many(i))}async PostRequestVoteForThread(e,t){let s=e.body,a=await d.getByNickname(s.nickname);if(!a)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find user with nickname "+s.nickname});const n=f(e.params.slug_or_id)?"id":"slug";let r=f(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,i=await g.get(n,r);if(!i)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug or id "+e.params.slug_or_id});i.id=Number(i.id);let o=await S.create(s.voice,a,i);if(!o.isSuccess)return t.code(400).header("Content-Type","application/json; charset=utf-8").send({message:o.message});if(!o.data)return t.code(200).header("Content-Type","application/json; charset=utf-8").send(y.serialize_one(i));let u=o.data.voice;o.data.existed&&(u=1==u?u+1:u-1);let c=await g.updateThreadVotes(i,u);if(o.isSuccess)return t.code(200).header("Content-Type","application/json; charset=utf-8").send(y.serialize_one(c.data));t.code(500).header("Content-Type","application/json; charset=utf-8").send()}async GetRequestThreadDetails(e,t){const s=f(e.params.slug_or_id)?"id":"slug";let a=f(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,n=await g.get(s,a);if(!n)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug or id "+e.params.slug_or_id});t.header("Content-Type","application/json; charset=utf-8").send(y.serialize_one(n))}async PostRequestThreadDetails(e,t){const s=f(e.params.slug_or_id)?"id":"slug";let a=f(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,n=await g.get(s,a);if(!n)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug or id "+e.params.slug_or_id});let r=await g.updateThread(n.id,e.body);if(!r)return t.code(409).header("Content-Type","application/json; charset=utf-8").send({message:"Can't change thread with id "+thread_id});!0===r?t.header("Content-Type","application/json; charset=utf-8").send(y.serialize_one(n)):t.header("Content-Type","application/json; charset=utf-8").send(y.serialize_one(r))}async GetRequestThreadsPost(e,t){const s=f(e.params.slug_or_id)?"id":"slug";let a,n=f(e.params.slug_or_id)?Number(e.params.slug_or_id):e.params.slug_or_id,r=await g.get(s,n);if(!r)return t.code(404).header("Content-Type","application/json; charset=utf-8").send({message:"Can't find forum with slug or id "+e.params.slug_or_id});a=await w.getPostByThreadId(e.query.sort,r.id,{desc:"true"===e.query.desc,limit:e.query.limit?parseInt(e.query.limit):100,since:e.query.since}),t.header("Content-Type","application/json; charset=utf-8").send(E.serialize_many(a))}},$=new class{async getServiceStatus(e,t){await d.getCount(),await h.getCount(),await g.getCount(),await w.getCount(),t.header("Content-Type","application/json; charset=utf-8").send({user:Number(d.count),forum:Number(h.count),thread:Number(g.count),post:Number(w.count)})}async clearAll(e=null,t){await d.clearAll(),await h.clearAll(),await g.clearAll(),await w.clearAll(),await S.clearAll(),t.code(200).header("Content-Type","application/json; charset=utf-8").send(null)}};const O=s(2)({});O.addContentTypeParser("application/json",{parseAs:"string"},(function(e,t,s){try{let e={};t&&(e=JSON.parse(t)),s(null,e)}catch(e){e.statusCode=400,s(e,void 0)}})),O.get("/api/user/:nickname/profile",l.get),O.post("/api/user/:nickname/profile",l.updateUser),O.post("/api/user/:nickname/create",l.createUser),O.post("/api/forum/create",T.createForum),O.get("/api/forum/:slug/details",T.GetRequestGetForumDetails),O.post("/api/forum/:slug/create",T.PostRequestCreateThreadsForForum),O.get("/api/forum/:slug/threads",T.GetRequestGetForumThreads),O.get("/api/forum/:slug/users",T.GetRequestGetForumUsers),O.post("/api/thread/:slug_or_id/create",R.PostRequestPostForThread),O.post("/api/thread/:slug_or_id/vote",R.PostRequestVoteForThread),O.get("/api/thread/:slug_or_id/details",R.GetRequestThreadDetails),O.post("/api/thread/:slug_or_id/details",R.PostRequestThreadDetails),O.get("/api/thread/:slug_or_id/posts",R.GetRequestThreadsPost),O.get("/api/post/:id/details",N.GetRequestPostDetails),O.post("/api/post/:id/details",N.PostRequestPostDetails),O.get("/api/service/status",$.getServiceStatus),O.post("/api/service/clear",$.clearAll);const I=process.env.PORT||5e3;O.listen(I,"0.0.0.0",(function(e,t){e&&(O.log.error(e),process.exit(1)),O.log.info("server listening on "+t)}))}]);